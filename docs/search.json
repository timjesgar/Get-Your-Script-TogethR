[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Get Your Script TogethR!",
    "section": "",
    "text": "Sammlung an Tutorials und How-Tos um die Irrungen und Wirrungen der Aufbereitung und Auswertung psych. wissenschaftlicher Daten zu meistern."
  },
  {
    "objectID": "how-tos/how-tos.html",
    "href": "how-tos/how-tos.html",
    "title": "How-Tos",
    "section": "",
    "text": "Manche Programmierprobleme tauchen immer wieder in der Aufbereitung und Auswertung von wissenschaftlichen Daten auf, benötigen aber teilweise so spezifisches Wissen, dass man sich jedes Mal aus neue dazu einlesen muss. Damit die nächste Pattern Extraction aus Strings oder parallele Berechnung von mehreren Modellen smoother verläuft, gibt es hier eine Sammlung aus nützlichen How-Tos zu Programmierproblemen denen wir immer wieder begegnen.",
    "crumbs": [
      "How-Tos"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "how-tos/how-to_functional-programming.html",
    "href": "how-tos/how-to_functional-programming.html",
    "title": "How-To: Functional Programming",
    "section": "",
    "text": "Incentive\n\n\ntl;dr\n\nyour_list |&gt;\n  set_names() |&gt;\n  map(\\(list_entry) {\n    # your code\n  })\n\n\n\nIn detail",
    "crumbs": [
      "How-Tos",
      "How-To: Functional Programming"
    ]
  },
  {
    "objectID": "reproducible-projects/reproducible_projects.html",
    "href": "reproducible-projects/reproducible_projects.html",
    "title": "Reproduzierbare Analyseprojekte mit R",
    "section": "",
    "text": "Ein Ziel von Open Science ist die Reproduzierbarkeit von Studienergebnissen auf Basis der Originaldaten. Um dies zu gewährleisten, ist es hilfreich, neben den Originaldaten auch die genutzten Code-Skripte im “Plug-and-Play”-Format aufzubereiten und zu veröffentlichen. “Plug-and-Play” bezieht sich hierbei darauf, dass eine andere Person durch das einfache durchlaufen lassen der Skripte zu dem selben Ergebnis kommt, die auch berichtet wurden.\nWas zunächst simpel klingt, ist in der Anwendung meist komplexer als man denkt: Skripte entwickeln sich über den Lauf eines Projektes organisch zu Ungetümen, bei denen selbst die verfassende Person nicht mehr durchblickt. Wichtige Dateipfade werden hard-coded, sodass das Skript nicht mehr funktioniert, wenn es verschoben wird. Oder, ein R-Paket wird auf eine Art aktualisiert, dass der gestern noch funktionierende Code nur noch Fehler wirft. Auch wenn nicht jede Eventualität vorhergesehen werden kann, so kann man doch Schritte gehen, um solche Probleme möglichst minimal zu halten. Einige diese Schritte, von vorausschauendem Kommentieren, über adaptive relative Pfaden, zu reproduzierbaren R-Umgebungen, sollen hier vorgestellt werden um einen Einblick zu geben, wie man mit überschaubarem Aufwand die eigenen Analysen reproduzierbarer machen kann."
  },
  {
    "objectID": "reproducible-projects/reproducible_projects.html#struktur-eines-analyseprojekts",
    "href": "reproducible-projects/reproducible_projects.html#struktur-eines-analyseprojekts",
    "title": "Reproduzierbare Analyseprojekte mit R",
    "section": "Struktur eines Analyseprojekts",
    "text": "Struktur eines Analyseprojekts\nZuallererst ist es hilfreich, für jedes Analyseprojekt einen dedizierten Ordner zu haben, anstatt einen Riesenordner mit diversen Skripten von verschiedenen Projekten zu kultivieren. Dieses partialisierte Vorgehen hat einige Vorteile:\n\nÜbersichtlichkeit: Du suchst nach einem Projekt, welches du vor Jahren abgeschlossen hast? Ein Ordner 202X_projekt-name ist schnell gefunden.\nErwartbarkeit: Idealerweise ist der Aufbau jedes Projekts, also welche Unterordner es gibt und wo relevante Dateien liegen, identisch. Das macht es einfach, sich in Projekte reinzudenken, die man lange nicht mehr geöffnet hat.\nZuordbarkeit relevanter Dateien: Du nennst für jede Analyse den Originaldatensatz gleich? Das kann schnell zum Problem werden, wenn du nicht mehr weißt, ob raw_data1.csv oder raw_data2.csv der richtige Datensatz für dein aktuelles Projekt ist. Ein Projektordner löst das Problem, da nur die zugehörigen Dateien in den jeweiligen Ordnern gespeichert werden.\nPortabilität: Du willst deine Analysen mit jemand anderem teilen? Kein Problem! Teile einfach den gesamten Projektordner!\n\nDu siehst, so ein Analyseprojekt kann einiges leichter machen. Damit du vollumfänglich von diesen Vorteilen profitieren kannst, müssen wir allerdings beim Setup des Projekts einige Dinge beachten. Fangen wir erstmal mit der Ordnerstruktur selbst an:\n\nErstellen des Projektordners\nDas einfachste Vorgehen ist, einen Ordner manuell zu erstellen und mit einem deskriptiven Name zu versehen (z.B. 2025_projekt-projektname). Wenn du aber, wie wahrscheinlich die meisten, deine R-Analysen mittels einer IDE (Integrated Development Environment) wie RStudio oder Positron durchführst, ist es sinnvoll, das Projektsetup der jeweiligen IDE zu überlassen. Dadurch werden dir einige Setup-Schritte abgenommen und du kannst dir sicher sein, dass deine IDE deinen Projektordner auch als Projekt erkennt.\nHier also das Vorgehen für zwei der bekanntesten IDEs für das arbeiten mit R:\n\n\n\n\n\n\nProjekt-Setup mit RStudio\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\nProjekt-Setup mit Positron\n\n\n\n\n\nTODO\n\n\n\n\n\nErstelle die Unterordner-Struktur\nTODO"
  }
]