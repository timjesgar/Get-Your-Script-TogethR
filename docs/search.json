[
  {
    "objectID": "tutorials/fuer-einsteigr.html",
    "href": "tutorials/fuer-einsteigr.html",
    "title": "Für EinsteigR",
    "section": "",
    "text": "Die Abschlussarbeit steht an – und du hast sogar schon alle Daten gesammelt?\nGlückwunsch, du bist schon weiter als viele andere. Jetzt fehlt ja „nur noch“ die Auswertung. Klingt erstmal nach einem Klick in SPSS oder Excel – aber wer schon einmal versucht hat, echte Studiendaten auszuwerten, weiß: Der schwierigste Teil kommt oft vor der Statistik.\nDatenaufbereitung, R-Skripte, Formatprobleme, Datentypen und Co. – was nach einer wilden Mischung aus Zauberspruch und Fehlermeldung klingt, ist in Wirklichkeit gut machbar. Vorausgesetzt, man hat den richtigen Einstieg.\nGenau den findest du hier.\nIn dieser Tutorial-Reihe begleiten wir dich Schritt für Schritt durch die wichtigsten Grundlagen, um deine Daten in den Griff zu bekommen – mit R, einer kostenlosen Programmiersprache, die besonders in der Forschung mittlerweile Standard ist.\nWas dich erwartet:\n\nR Basics – Was ist R eigentlich? Wie funktioniert RStudio? Und warum ist ein Pfeil plötzlich ein Zuweisungsoperator?\nDaten aufräumen wie Marie Kondo – Von wildem Datenchaos zur sauberen Tabelle: Importieren, Filtern, Umkodieren, Zusammenführen.\nDer Weg zur Analyse – Sobald deine Daten bereit sind, wird der statistische Teil plötzlich viel einfacher. Wirklich.",
    "crumbs": [
      "TUTORIALS",
      "Für EinsteigR"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Get Your Script TogethR!",
    "section": "",
    "text": "Sammlung an Tutorials und How-Tos um die Irrungen und Wirrungen der Aufbereitung und Auswertung psych. wissenschaftlicher Daten zu meistern."
  },
  {
    "objectID": "how-tos/how-tos.html",
    "href": "how-tos/how-tos.html",
    "title": "How-Tos",
    "section": "",
    "text": "Manche Programmierprobleme tauchen immer wieder in der Aufbereitung und Auswertung von wissenschaftlichen Daten auf, benötigen aber teilweise so spezifisches Wissen, dass man sich jedes Mal aus neue dazu einlesen muss. Damit die nächste Pattern Extraction aus Strings oder parallele Berechnung von mehreren Modellen smoother verläuft, gibt es hier eine Sammlung aus nützlichen How-Tos zu Programmierproblemen denen wir immer wieder begegnen.",
    "crumbs": [
      "HOW-TOS",
      "How-Tos"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "how-tos/how-to_functional-programming.html",
    "href": "how-tos/how-to_functional-programming.html",
    "title": "How-To: Functional Programming",
    "section": "",
    "text": "Incentive\n\n\ntl;dr\n\nyour_list |&gt;\n  set_names() |&gt;\n  map(\\(list_entry) {\n    # your code\n  })\n\n\n\nIn detail",
    "crumbs": [
      "HOW-TOS",
      "How-To: Functional Programming"
    ]
  },
  {
    "objectID": "reproducible-projects/reproducible_projects.html",
    "href": "reproducible-projects/reproducible_projects.html",
    "title": "Reproduzierbare Analyseprojekte mit R",
    "section": "",
    "text": "Ein Ziel von Open Science ist die Reproduzierbarkeit von Studienergebnissen auf Basis der Originaldaten. Um dies zu gewährleisten, ist es hilfreich, neben den Originaldaten auch die genutzten Code-Skripte im “Plug-and-Play”-Format aufzubereiten und zu veröffentlichen. “Plug-and-Play” bezieht sich hierbei darauf, dass eine andere Person durch das einfache durchlaufen lassen der Skripte zu dem selben Ergebnis kommt, die auch berichtet wurden.\nWas zunächst simpel klingt, ist in der Anwendung meist komplexer als man denkt: Skripte entwickeln sich über den Lauf eines Projektes organisch zu Ungetümen, bei denen selbst die verfassende Person nicht mehr durchblickt. Wichtige Dateipfade werden hard-coded, sodass das Skript nicht mehr funktioniert, wenn es verschoben wird. Oder, ein R-Paket wird auf eine Art aktualisiert, dass der gestern noch funktionierende Code nur noch Fehler wirft. Auch wenn nicht jede Eventualität vorhergesehen werden kann, so kann man doch Schritte gehen, um solche Probleme möglichst minimal zu halten. Einige diese Schritte, von vorausschauendem Kommentieren, über adaptive relative Pfaden, zu reproduzierbaren R-Umgebungen, sollen hier vorgestellt werden um einen Einblick zu geben, wie man mit überschaubarem Aufwand die eigenen Analysen reproduzierbarer machen kann."
  },
  {
    "objectID": "reproducible-projects/reproducible_projects.html#struktur-eines-analyseprojekts",
    "href": "reproducible-projects/reproducible_projects.html#struktur-eines-analyseprojekts",
    "title": "Reproduzierbare Analyseprojekte mit R",
    "section": "Struktur eines Analyseprojekts",
    "text": "Struktur eines Analyseprojekts\nZuallererst ist es hilfreich, für jedes Analyseprojekt einen dedizierten Ordner zu haben, anstatt einen Riesenordner mit diversen Skripten von verschiedenen Projekten zu kultivieren. Dieses partialisierte Vorgehen hat einige Vorteile:\n\nÜbersichtlichkeit: Du suchst nach einem Projekt, welches du vor Jahren abgeschlossen hast? Ein Ordner 202X_projekt-name ist schnell gefunden.\nErwartbarkeit: Idealerweise ist der Aufbau jedes Projekts, also welche Unterordner es gibt und wo relevante Dateien liegen, identisch. Das macht es einfach, sich in Projekte reinzudenken, die man lange nicht mehr geöffnet hat.\nZuordbarkeit relevanter Dateien: Du nennst für jede Analyse den Originaldatensatz gleich? Das kann schnell zum Problem werden, wenn du nicht mehr weißt, ob raw_data1.csv oder raw_data2.csv der richtige Datensatz für dein aktuelles Projekt ist. Ein Projektordner löst das Problem, da nur die zugehörigen Dateien in den jeweiligen Ordnern gespeichert werden.\nPortabilität: Du willst deine Analysen mit jemand anderem teilen? Kein Problem! Teile einfach den gesamten Projektordner!\n\nDu siehst, so ein Analyseprojekt kann einiges leichter machen. Damit du vollumfänglich von diesen Vorteilen profitieren kannst, müssen wir allerdings beim Setup des Projekts einige Dinge beachten. Fangen wir erstmal mit der Ordnerstruktur selbst an:\n\nErstellen des Projektordners\nDas einfachste Vorgehen ist, einen Ordner manuell zu erstellen und mit einem deskriptiven Name zu versehen (z.B. 2025_projekt-projektname). Wenn du aber, wie wahrscheinlich die meisten, deine R-Analysen mittels einer IDE (Integrated Development Environment) wie RStudio oder Positron durchführst, ist es sinnvoll, das Projektsetup der jeweiligen IDE zu überlassen. Dadurch werden dir einige Setup-Schritte abgenommen und du kannst dir sicher sein, dass deine IDE deinen Projektordner auch als Projekt erkennt.\nHier also das Vorgehen für zwei der bekanntesten IDEs für das arbeiten mit R:\n\n\n\n\n\n\nProjekt-Setup mit RStudio\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\nProjekt-Setup mit Positron\n\n\n\n\n\nTODO\n\n\n\n\n\nErstelle die Unterordner-Struktur\nTODO"
  },
  {
    "objectID": "tutorials/Rste-schritte.html",
    "href": "tutorials/Rste-schritte.html",
    "title": "Rste Schritte",
    "section": "",
    "text": "Für die Aufbereitung und Analyse deiner Daten empfehlen wir R – eine Programmiersprache die in der Wissenschaft weit verbreitet ist. Um den Umgang mit R zu vereinfachen, nutzen wir RStudio. Dabei handelt es sich um eine integrierte Entwicklungsumgebung (IDE), also sozusagen ein All-in-one-Programm für alle, die mit R arbeiten: Du kannst hier Code schreiben, ausführen, deine Daten anschauen und direkt schöne Plots erzeugen – ohne ständig zwischen Programmen zu wechseln.\n\n\n\n\n\n\nInstallation\n\n\n\nInstalliere zuerst R, dann RStudio auf deinem Computer. Die Dateien kannst du kostenlos hier herunterladen.\n\n\n\nRStudio Interface\n\nStandardmäßig ist RStudio in vier Bereiche (auch “Panes”) aufgeteilt:\n\nSource (oben links)\n\nHier schreibst und bearbeitest du deine Skripte oder Quarto-/RMarkdown-Dokumente. Du kannst deinen Code hier speichern und später erneut ausführen.\n\nConsole (unten links)\n\nIn diesem Bereich wird der Code tatsächlich ausgeführt. Du kannst hier auch direkt Befehle eingeben und die Ergebnisse sofort sehen.\n\nEnvironment / History (oben rechts)\n\nEnvironment zeigt dir alle Objekte (z. B. Daten, Funktionen, Variablen), die aktuell im Arbeitsspeicher liegen.\nHistory listet alle bisherigen Befehle auf, die du ausgeführt hast.\n\nFiles / Plots / Packages / Help / Viewer (unten rechts)\n\nDieser Bereich enthält mehrere Reiter:\n\nFiles: zeigt Dateien und Ordner im aktuellen Projektordner.\nPlots: zeigt Grafiken, die du mit R erzeugst.\nPackages: zeigt installierte R-Pakete an und ermöglicht deren Verwaltung.\nHelp: zeigt Hilfeseiten zu Funktionen und Paketen.\nViewer: zeigt z. B. interaktive HTML-Outputs aus Quarto an.\n\n\n\nDu kannst die Anordnung der Fenster bei Bedarf unter Tools &gt; Global Options &gt; Pane Layout anpassen.\n\n\n\n\n\n\nDesignoptionen\n\n\n\n\n\nStandardmäßig ist das Theme von RStudio hell. Wenn dir das zu langweilig ist, kannst du das Programm ganz einfach an deinen Geschmack anpassen: Unter Tools &gt; Global Options &gt; Appearance hast du die Möglichkeit, ein anderes Farbschema oder eine neue Schriftart auszuwählen.\nFür besonders ansprechende Symbole – etwa den Zuweisungspfeil “&lt;-” – empfiehlt sich die Schriftart Fira Code. Sie sorgt für eine übersichtlichere Darstellung und unterstützt sogenannte Ligaturen. Dafür ist eine vorherige Installation notwendig.\n\n\n\n\n\nBefehle und Skripte\nCode kannst du zwar auch direkt in der Konsole schreiben und ausführen, allerdings wird dieser dort nicht nach der Sitzung erhalten. Um dein Vorgehen für dich und andere replizierbar zu machen, empfiehlt es sich mit Skripten zu arbeiten. Bei einem Skript handelt es sich um eine Datei, in der du Code schreiben und diesen direkt ausführen kannst. Um ein neues Skript zu erstellen, wähle im Menü File &gt; New File &gt; R Script oder klicke alternativ auf das Blatt mit dem Plussymbol links oben und wähle dort “R Script” aus.\nDas leere Skript kannst du jetzt mit deinem Code füllen. Probier es doch gleich mal aus und schreibe eine einfache Rechnung in dein Skript:\n\n&gt; 1 + 1\n\n[1] 2\n\n\nDen Code kannst du jetzt direkt ausführen, indem du in die zugehörige Zeile klickst und  drückst. Der ausgeführte Code und das Ergebnis erscheinen dann unten in der Konsole. Du kannst auch mehrere Befehle ausführen, indem du die Codezeilen markierst und dann  drückst. Du hast außerdem die Möglichkeit, oben rechts im Source-Pane mit einem Mausklick den markierten Code auszuführen. Wenn du dein gesamtes Skript auf einmal ausführen möchtest, geht das ganz einfach über Strg+Shift+EnterStrg+Shift+Enter.\n\n\nZuweisung von Objekten\nIn R arbeitet man fast immer mit Objekten – das sind „Behälter“, in denen Werte, Vektoren, Dataframes oder ganze Modelle gespeichert werden können. Damit man diese später weiterverwenden kann, muss man sie einem Namen zuweisen. Dafür verwendet man den Zuweisungsoperator &lt;- :\n\n&gt; x &lt;- 8\n&gt; ich_bin_ein_objekt &lt;- \"Objekt\"\n\nIm Environment sieht man jetzt auch die erstellten Objekte:\n\n\n\n\n\n\n\nTipp\n\n\n\n\n\nDamit du nicht immer &lt; und - einzeln tippen musst, kannst du den Shortcut  zum Einfügen des Zuweisungsoperators nutzen.\n\n\n\nObjektnamen müssen immer mit einem Buchstaben beginnen und dürfen nur Buchstaben, Zahlen, _ und . enthalten. Außerdem empfehlen wir, dich für ein einheitliches Benennungsschema zu entscheiden (z.B. snake_case oder CamelCase).\nJetzt fragst du dich vielleicht, wofür wir solche Objekte überhaupt brauchen.\n\nWiederverwendbarkeit: Statt Zahlen oder Daten immer neu einzutippen, ruft man einfach das Objekt auf.\nLesbarkeit: Klar benannte Objekte machen den Code verständlicher.\nFlexibilität: Ändert man das Objekt an einer Stelle, kann man es überall im Skript nutzen, ohne mehrfach suchen und ersetzen zu müssen.\nStruktur: Komplexe Analysen bestehen aus vielen Zwischenschritten – Objekte helfen, diese geordnet zu speichern.\n\nUm dir ein Objekt anzusehen, führe einfach seinen Namen aus. Aber Achtung: Schreibfehler haben Konsequenzen.\n\n&gt; Ich_bin_ein_Objekt \n\nError: object 'Ich_bin_ein_Objekt' not found\n\n&gt; ich_bin_ein_objekt\n\n[1] \"Objekt\"\n\n\n\n\nDatentypen und Strukturen\nDie für uns wichtigsten Datentypen in R sind (a) numeric (5, 7.8, 3462), (b) character (“Blume”, “14”, “FALSE”) und (c) logical (TRUE oder FALSE). Mit der Funktion class() kannst du überprüfen, welcher Datentyp ein bestimmtes Objekt ist.\n\n&gt; x &lt;- 8\n&gt; class(x)\n\n[1] \"numeric\"\n\n&gt; y &lt;- \"Blume\"\n&gt; class(y)\n\n[1] \"character\"\n\n&gt; z &lt;- TRUE \n&gt; class(z)\n\n[1] \"logical\"\n\n\nNeben Datentypen unterscheiden wir noch zwischen verschiedenen Datenstrukturen. Die Art der Datenstruktur hängt von ihren Dimensionen sowie ihrer Heterogenität ab. Atomische Vektoren z.B. enthalten mehrere Werte des gleichen Typs (z.B. nur numerics) und sind damit eindimensional und homogen. Listen sind auch eindimensional, aber sie können unterschiedliche Datentypen enthalten. Eine Matrix ist zweidimensional (Zeilen x Spalten) und homogen. Bei der Auswertung deiner Daten wirst du vermutlich am meisten mit Dataframes zu tun haben. Dataframes kannst du als Tabellen betrachten, die die Eigenschaften von Listen und Matrizen kombinieren, indem sie zweidimensional und heterogen sind. D.h., unterschiedliche Spalten innerhalb des Dataframes dürfen unterschiedliche Datentypen enthalten.\n\n\n\n\nHomogen\nHeterogen\n\n\n\n\nEindimensional\nAtomischer Vektor\nListe\n\n\nZweidimensional\nMatrix\nDataframe\n\n\nn-Dimensional\nArray\n\n\n\n\nIn R kannst du folgendermaßen die verschiedenen Datenstrukturen erstellen:\n\n# Vektor\nzahlen &lt;- c(1, 2, 3, 4)          # numeric\nwoerter &lt;- c(\"a\", \"b\", \"c\")      # character\nlogisch &lt;- c(TRUE, FALSE, TRUE)  # logical\n\n# Matrix \n\nm &lt;- matrix(1:6, nrow = 2, ncol = 3)\n\n# Liste \n\nl &lt;- list(\n  zahlen = c(1, 2, 3),\n  text = \"Hallo\",\n  df = data.frame(id = 1:2, wert = c(10, 20))\n)\n\n# Dataframe \n\ndf &lt;- data.frame(\n  name = c(\"Anna\", \"Ben\", \"Chris\"),\n  age = c(23, 25, 30),\n  student = c(TRUE, FALSE, TRUE)\n)\n\n\nFaktoren\nNeben atomischen Vektoren (nur ein Datentyp) gibt es auch Faktoren – das sind spezielle Vektoren für kategoriale Daten mit Levels. Ein Faktor sieht auf den ersten Blick aus wie ein Character-Vektor, speichert intern aber zusätzlich die Liste der erlaubten Kategorien und deren Reihenfolge. Daher kommt er bei der Arbeit mit psychologischen Datensätzen oft zum Einsatz.\n\nEin Character-Vektor lässt sich ganz einfach als Faktor darstellen. Wie man anhand des Beispiels sieht, wird pro einzigartigem Wert ein Level erstellt:\n\n\nf1 &lt;- factor(c(\"rot\", \"blau\", \"rot\", \"grün\"))\nlevels(f1)\n\n[1] \"blau\" \"grün\" \"rot\" \n\n\n\nMan kann auch die Reihenfolge der Levels festlegen, damit sie z.B. beim Plotten der Daten in der richtigen Reihenfolge angezeigt werden. Wichtig zu beachten ist, dass es sich hierbei nicht um eine mathematische Beziehung handelt. Hier sagst du nur: Wenn R die Kategorien anzeigt oder plottet, bitte in dieser Reihenfolge. Aber R versteht nicht, dass „niedrig &lt; mittel &lt; hoch“ eine Rangordnung ist (dazu unter 4. mehr).\n\n\nf2 &lt;- factor(c(\"mittel\", \"hoch\", \"niedrig\", \"mittel\"),\n             levels = c(\"niedrig\", \"mittel\", \"hoch\"))\nlevels(f2)\n\n[1] \"niedrig\" \"mittel\"  \"hoch\"   \n\n\n\nMan kann einem bestehenden Vektor auch eigene Labels zuweisen:\n\n\ncodes &lt;- c(1, 2, 1, 3)\nf3 &lt;- factor(codes, levels = c(1, 2, 3), \n                    labels = c(\"Kontrolle\", \"Treatment A\", \"Treatment B\"))\n\n\nWenn du festlegen möchtest, dass es sich um einen geordneten Faktor handelt, kannst du das über den ordered Befehl machen. Hier sagst du: „Das sind nicht nur Kategorien, sondern eine Rangskala.“ R weiß jetzt: stimme nicht zu &lt; neutral &lt; stimme zu. Das erlaubt nicht nur Vergleiche, sondern kommt auch bei statistischen Verfahren zum Einsatz (z. B. ordinale Regression).\n\n\nlikert &lt;- factor(c(\"stimme zu\",\"neutral\",\"stimme nicht zu\"),\n                 levels = c(\"stimme nicht zu\",\"neutral\",\"stimme zu\"),\n                 ordered = TRUE)\n\nlikert[1] &lt; likert[3] \n\n[1] FALSE\n\n\n\nEbenfalls wichtig für statistische Modelle ist die Referenzkategorie, die sich wie folgt setzen bzw. ändern lässt:\n\n\ngruppe &lt;- factor(c(\"Kontrolle\", \"A\", \"B\"))\ngruppe &lt;- relevel(gruppe, ref = \"Kontrolle\")   \n\n\n\n\nFunktionen\nIn R erledigt man fast alles mit Funktionen. Eine Funktion nimmt Eingaben (sogenannte Argumente) entgegen, führt Berechnungen aus und gibt ein Ergebnis zurück.\nDie allgemeine Schreibweise lautet:\n\n&gt; funktion(argument1 = wert1, argument2 = wert2, ...)\n\n\nDer Funktionsname steht vorne.\nIn den runden Klammern werden die Argumente angegeben.\n\n\n\n\n\n\n\nHinweis\n\n\n\n\n\nViele Funktionen haben Standardwerte, sodass man nicht alle Argumente zwingend angeben muss.\n\n\n\n\nBeispiele\nR verfügt über eine Vielzahl von Funktionen, die sich anwenden lassen. Mit ihnen kann man beispielsweise schnell den Mittelwert, die Summe oder die Länge eines Vektors bestimmen:\n\n# Mittelwert berechnen\nzahlen &lt;- c(1, 2, 3, 4, 5)\nmean(zahlen)\n\n[1] 3\n\n# Summe\nsum(zahlen)\n\n[1] 15\n\n# Länge eines Vektors\nlength(zahlen)\n\n[1] 5\n\n\n\n\nR Documentation\nFalls du dir unsicher bist, wie eine Funktion genau funktioniert oder welche Argumente sie erwartet, kannst du die integrierte Hilfe in R nutzen:\n\n?mean           \nhelp(mean) # alternativ      \n\nAlternativ kannst du auch rechts unten in RStudio über das Help-Fenster nach der Funktion suchen.\n\nWenn du nicht genau weißt, wie eine Funktion heißt, kannst du nach Stichworten suchen:\n\n??median\n\n\n\n\nPakete\nR verfügt vom Punkt der Installation aus bereits über eine Vielzahl an Funktionen. Da es sich um eine Programmiersprache handelt, stehen online aber auch zusätzliche Pakete kostenlos zur Verfügung, die Base R um Funktionen für spezifische Anwendungen oder quality-of-life Verbesserungen erweitern. Neue Pakete müssen vor der Nutzung einmal installiert und dann bei jedem Neustart von R geladen werden. Dafür stehen glücklicherweise passende Funktionen zur Verfügung.\nProbier das doch gleich mal aus, indem du das Paket tidyverse installierst.\n\n# einmalig installieren\ninstall.packages(\"tidyverse\")\n\n# jedes Mal laden, wenn du es nutzen möchtest\nlibrary(tidyverse)\n\n\n\n\n\n\n\nDas tidyverse\n\n\n\n\n\nDas tidyverse ist eine Sammlung von R-Paketen, die für Datenanalyse und Datenvisualisierung entwickelt wurden. Alle Pakete im tidyverse folgen gemeinsamen Designprinzipien und einer einheitlichen Syntax, sodass sie gut zusammenarbeiten.\nMit dem tidyverse kannst du deine Daten:\n\nimportieren (z. B. readr für CSV-Dateien),\naufräumen (z. B. tidyr für fehlende Werte oder Umformungen),\nbearbeiten (z. B. dplyr für Filter, Gruppierungen, Berechnungen),\nvisualisieren (z. B. ggplot2 für Plots).\n\n\n\n\nWir empfehlen, die innerhalb deines R-Skriptes verwendeten Pakete auch immer dort zu laden. So musst du beim nächsten mal nur den Code ausführen und bekommst keine Fehlermeldungen wegen fehlender Funktionen.\n\n\nArbeitsverzeichnis\nDas Arbeitsverzeichnis ist der Ordner, in dem R standardmäßig nach Dateien sucht und in dem neue Dateien gespeichert werden. Wenn du z. B. eine CSV-Datei einliest, ohne den vollständigen Pfad anzugeben, sucht R sie im aktuellen Arbeitsverzeichnis.\nDu kannst das aktuelle Arbeitsverzeichnis mit folgendem Befehl herausfinden:\n\ngetwd()\n\nUm es zu ändern, kannst du den Pfad manuell setzen:\n\nsetwd(\"C:/Users/DeinName/Projektordner\")\n\nAchtung: Das manuelle Setzen des Arbeitsverzeichnisses ist fehleranfällig, wenn du Dateien oder Ordner verschiebst oder wenn andere deinen Code ausführen wollen.\n\nBesser: R Projects\nEine deutlich bessere Lösung ist es, mit RStudio Projects zu arbeiten. Ein Project ist im Prinzip ein Ordner, den RStudio als Arbeitsumgebung behandelt. Wenn du ein Project öffnest, wird das Arbeitsverzeichnis automatisch auf den Projektordner gesetzt.\nDamit musst du dich nicht mehr mit setwd() herumärgern, und dein Code bleibt reproduzierbar – auch für andere.\nWir erklären dir die Arbeit mit Projects hier genauer.\n\n\n\nWas du bisher gelernt hast\nNach diesem Kapitel solltest du:\n\nwissen, dass R eine Programmiersprache ist und RStudio eine benutzerfreundliche Arbeitsumgebung (IDE),\ndas Interface von RStudio mit seinen vier Bereichen (Source, Console, Environment/History, Files/Plots/Packages/Help/Viewer) kennen,\nverstehen, warum es sinnvoll ist, mit Skripten statt nur in der Konsole zu arbeiten,\nObjekte erstellen und zuweisen können (mit &lt;-),\ndie wichtigsten Datentypen unterscheiden (numeric, character, logical, factor),\ndie grundlegenden Datenstrukturen in R benennen und einfache Beispiele erstellen können (Vektor, Liste, Matrix, Dataframe),\nwissen, wie man Funktionen aufruft, Argumente übergibt und die Hilfefunktion nutzt,\nverstanden haben, wie man Pakete installiert und lädt (z. B. das tidyverse),\nden Unterschied zwischen Arbeitsverzeichnis und R Projects kennen – und dass wir für reproduzierbare Analysen Projects empfehlen.",
    "crumbs": [
      "TUTORIALS",
      "Rste Schritte"
    ]
  }
]